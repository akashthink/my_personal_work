Functions types
Lambda,map,filters
Generator,Iterator



Oops:
Variables & Methods
Super
Inheritance
Polymorphism
Abstraction(Abstract class & Interface)
Encapsulation


Exception Handling
File Handling




Encapsulation in Python:-

Capsule--->
Grouping/combining data member and member function in single unit is known as Encp.

Restrict access to method and variable 

Prevent data from direct modification

Advantage:
1-Security
2-Enhancement will be easy{without affecting outside we can able to perform any type of change internally }
3-Maintainability
4-Modularity

Disadvantage:
1-Time consuming process slows the speed
2-Username/password/Otp 



Real example for encapsulation
Consider a real-life example of encapsulation, in a company, there are different sections like the accounts section, finance section, sales section etc. 
The finance section handles all the financial transactions and keeps records of all the data related to finance. 
Similarly, the sales section handles all the sales-related activities and keeps records of all the sales.
Now there may arise a situation when for some reason an official from the finance section needs all the data about sales in a particular month. 

In this case, he is not allowed to directly access the data of the sales section. He will first have to contact some other officer in the sales section and then request him to give the particular data. This is what encapsulation is. 
Here the data of the sales section and the employees that can manipulate them are wrapped under a single name “sales section”. Using encapsulation also hides the data.

In this example, the data of the sections like sales, finance, or accounts are hidden from any other section..





__  private variable:



 Type                       Description
    
private variables  ----  Accessible only in their own class starts with two underscore
private methods    ----  Accessible only in their own class or by a method defined with two underscore
   
class Computer:

    def __init__(self):
        self.__maxprice = 900

    def sell(self):
        print("Selling Price: {}".format(self.__maxprice))

    def setMaxPrice(self, price):
        self.__maxprice = price

c = Computer()
c.sell()

# change the price
c.__maxprice = 1000
c.sell()

# using setter function
c.setMaxPrice(1000)
c.sell()

Output

Selling Price: 900
Selling Price: 900
Selling Price: 1000


9511113102

Forms

Every data goes in backened as string.

For input elements we should define label that means the box will be assocaited with the label.

<label for="">Enter name</label>
<input id="uname" type="text" name="username" value="enter name">

Mandatory fields:
< input type="...."  .....  required>

Placeholder vs value:
<placeholder ="Enter name">



















